enclave {

    from "sgx_tstdc.edl" import *;
    
    
    trusted {

        public void ecall_init([in,size=len] unsigned char *keyF, size_t len);
        public void ecall_addDoc([in, size=id_length] char *doc_id, size_t id_length, [in, size=content_length] char *content, int content_length);
        public void ecall_delDoc([in, size=id_length] char *doc_id, size_t id_length);
        public void ecall_search([in, size=len] const char *keyword, size_t len);

    };

    untrusted {

        void ocall_print_string([in, string] const char *str);
        void ocall_transfer_encrypted_entries([in, count= pair_count, size=rand_size] const void *t1_u_arr, 
									            [in, count= pair_count, size=rand_size] const void *t1_v_arr, 
									            [in, count= pair_count, size=rand_size] const void *t2_u_arr, 
									            [in, count= pair_count, size=rand_size] const void *t2_v_arr,
									            int pair_count, int rand_size); 
        void ocall_retrieve_encrypted_doc([in, size=del_id_len] const char *del_id, size_t del_id_len, 
                                          [out, size=maxLen] unsigned char *encrypted_content, size_t maxLen,
                                          [out, count=int_len] int *length_content, size_t int_len);
        
        void ocall_del_encrypted_doc([in, size=del_id_len] const char *del_id, size_t del_id_len);
        
        void ocall_retrieve_M_c([in, size=_u_prime_size] unsigned char * _u_prime, size_t _u_prime_size,
                                     [out, size=maxLen] unsigned char *_v_prime, size_t maxLen,
                                     [out, count=int_len] int *_v_prime_size, size_t int_len);
        
        void ocall_del_M_c_value([in, size=_u_prime_size] const unsigned char *_u_prime, size_t _u_prime_size);

        void ocall_query_tokens_entries([in, count= pair_count, size=rand_size] const void *Q_w_u_arr,
                               [in, count= pair_count, size=rand_size] const void *Q_w_id_arr,
                               int pair_count, int rand_size);


    };
};
